<% layout('layouts/boilerplate') %>
<div id="map" style="width: 100%; height: 500px"></div>
<h1>お湯処一覧</h1>
<div>
    <a href="/campgrounds/new">新規登録</a>
</div>

<% for(let campground of campgrounds) { %>
<div class="card mb-3">
    <div class="row">
        <div class="col-md-4">
            <img class="img-fluid" src="<%= campground.campground_images[0]?.path %>" alt="">
        </div>
        <div class="col-md-8">
            <div class="card-body">
                <h5 class="card-title"><%= campground.title %></h5>
                <p class="card-text"><%= campground.description %></p>
                <p class="card-text">
                    <small class="text-muted"><%= campground.location %></small>
                </p>
                <a class="btn btn-primary" href="/campgrounds/<%= campground.id %>"><%= campground.title %>の詳細</a>
            </div>
        </div>
    </div>
</div>
<% } %>

<script>
    const campgroundMap = <%- JSON.stringify(campgroundMap) %>;
    console.log({campgroundMap})
    // console.log("campgroundMap.id",campgroundMap[0].id)
    const mapToken = '<%= process.env.MAPBOX_TOKEN %>'
    mapboxgl.accessToken = mapToken;

    const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/light-v10',
        center: [138, 39],
        zoom: 4
    });

    let campgroundMapGeoJson = []
    campgroundMap.forEach((map)=>{
        // console.log("map.latitude",map.latitude)
        campgroundMapGeoJson.push({"id":map.id,"title":map.title,"geometry":{ "type": "Point", "coordinates": [map.latitude,map.longitude] }})
    })
    // console.log({campgroundMapGeoJson})

    // const campgroundMapGeoJson = [{"id":1,"title":"THE SPA 西新井","geometry":{ "type": "Point", "coordinates": [139.706449,35.7324297] }},
    // {"id":2,"title":"そうか健康センター","geometry":{ "type": "Point", "coordinates": [139.77859,35.8411846]}},
    // {"id":3,"title":"あや ほのか","geometry":{ "type": "Point", "coordinates": [141.4357252, 43.0012096]}}]
    // console.log(JSON.stringify(campgrounds))

    // const campgroundMapGeoJson = campgroundMapGeoJson


    map.on('load', () => {
        // Add a new source from our GeoJSON data and
        // set the 'cluster' option to true. GL-JS will
        // add the point_count property to your source data.
        map.addSource('campgrounds', {
            type: 'geojson',
            // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes
            // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.
            data: {
                features: campgroundMapGeoJson
            },
            cluster: true,
            clusterMaxZoom: 14, // Max zoom to cluster points on
            clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)
        });

        map.addLayer({
            id: 'clusters',
            type: 'circle',
            source: 'campgrounds',
            filter: ['has', 'point_count'],
            paint: {
                // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)
                // with three steps to implement three types of circles:
                //   * Blue, 20px circles when point count is less than 100
                //   * Yellow, 30px circles when point count is between 100 and 750
                //   * Pink, 40px circles when point count is greater than or equal to 750
                'circle-color': [
                    'step',
                    ['get', 'point_count'],
                    '#7986CB',
                    20,
                    '#2196F3',
                    40,
                    '#00BCD4'
                ],
                'circle-radius': [
                    'step',
                    ['get', 'point_count'],
                    15,
                    20,
                    20,
                    40,
                    25
                ]
            }
        });

        map.addLayer({
            id: 'cluster-count',
            type: 'symbol',
            source: 'campgrounds',
            filter: ['has', 'point_count'],
            layout: {
                'text-field': '{point_count_abbreviated}',
                'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
                'text-size': 12
            }
        });

        map.addLayer({
            id: 'unclustered-point',
            type: 'circle',
            source: 'campgrounds',
            filter: ['!', ['has', 'point_count']],
            paint: {
                'circle-color': '#11b4da',
                'circle-radius': 4,
                'circle-stroke-width': 1,
                'circle-stroke-color': '#fff'
            }
        });

        // inspect a cluster on click
        map.on('click', 'clusters', (e) => {
            const features = map.queryRenderedFeatures(e.point, {
                layers: ['clusters']
            });
            // console.log("features[0].properties.cluster_id",features[0].properties.cluster_id)
            const clusterId = features[0].properties.cluster_id;
            map.getSource('campgrounds').getClusterExpansionZoom(
                clusterId,
                (err, zoom) => {
                    if (err) return;

                    map.easeTo({
                        center: features[0].geometry.coordinates,
                        zoom: zoom
                    });
                }
            );
        });

        // When a click event occurs on a feature in
        // the unclustered-point layer, open a popup at
        // the location of the feature, with
        // description HTML from its properties.
        map.on('click', 'unclustered-point', (e) => {
            // console.log("e.features",e.features)
            // const { popupMarkup } = e.features[0].properties
            // console.log("features[0].properties.id",e.features[0].id)
            const search_id = e.features[0].id
            let title
            campgroundMapGeoJson.forEach((value)=> {
                console.log(value.id)
                if (search_id == value.id){
                    // console.log("value.title",value.title)
                    title = value.title
                }        
            })
            const popupMarkup = '<strong><a href="/campgrounds/'+e.features[0].id+'">'+title+'</a></strong>'
            const coordinates = e.features[0].geometry.coordinates.slice();

            // Ensure that if the map is zoomed out such that
            // multiple copies of the feature are visible, the
            // popup appears over the copy being pointed to.
            while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
            }

            new mapboxgl.Popup()
                .setLngLat(coordinates)
                .setHTML(popupMarkup)
                .addTo(map);
        });

        map.on('mouseenter', 'clusters', () => {
            map.getCanvas().style.cursor = 'pointer';
        });
        map.on('mouseleave', 'clusters', () => {
        map.getCanvas().style.cursor = '';
    });
    });
</script>